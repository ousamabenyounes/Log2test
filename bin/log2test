#!/usr/bin/env php
<?php
/*
 * This file is part of Log2Test Project.
 *
 * (c) Ousama Ben Younes <benyounes.ousama@gmail.com>
 *
 */

namespace Log2Test;

require_once('vendor/autoload.php');

use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Formatter\OutputFormatter;
use Symfony\Component\Console\Style\SymfonyStyle;

$output = new ConsoleOutput();
$output->setFormatter(new OutputFormatter(true));
$io = new SymfonyStyle(new ArrayInput([]), $output);

// Parsing parameters
$options = getopt("m:");
$mode = (isset($options['m']) ? $options['m'] : '');

$configParser = new \Log2Test\Parser\ConfigParser();
$logFile = $configParser->getValueFromCache('logFile');
$testGenerator = new TestGenerator($configParser, $logFile);

if ('generate' === $mode || '' === $mode) {
    $logParser = \Log2Test\Parser\Log\LogParserFactory::create();
    $time_start = microtime(true);
    $io->title('Log2Test: Generating all ' . $testGenerator->getTestStack() .' tests');
    $splFile = new \SplFileObject($logFile, 'r');
    $splFile->seek(PHP_INT_MAX);
    $nbLine = $splFile->key() + 1;
    $progress = new ProgressBar($output, $nbLine);
    $progress->setOverwrite(true);
    $progress->setFormat(' %current%/%max% [%bar%] %percent:3s%% %message%');
    $progress->setOverwrite(true);
    $progress->setMessage('Task starts');
    $progress->start();
    $nbFileGenerated = 0;
    $progress->setOverwrite(true);
    $progress->setProgress($logParser->getBeginLine());

    while (1) {
        $parseNextLine = $logParser->parse();
        $testGenerator->setTestConfiguration($logParser->getTestConfiguration());
        $nbFileGenerated += $testGenerator->generateAllTests($progress);
        $testGenerator->saveTestConfiguration();
        $progress->advance($testGenerator->getNumberOfLine());
        $logParser->setTestConfiguration([]);
        if (false === $parseNextLine)
        {
            break;
        }
    }
    $progress->finish();
    $io->newLine();
    $time_end = microtime(true);
    $timeTotal = (float) round($time_end - $time_start, 3);
    $io->note($testGenerator->getTestStack() . ' tests were generated. ' . $nbFileGenerated . ' files created in ' . $timeTotal . ' seconds');
}

if ('execute' === $mode || '' === $mode) {
    $testGenerator->archiveResult();
    $time_start = microtime(true);
    $testGenerator->generateTestSuiteLauncher();
    $executionCall = ('Curl' === $testGenerator->getTestStack() ? 'executeCurl' : 'executePhpunit');
    $testGenerator->$executionCall($output, true);
    $io->success('Finished running all Test Suites ');
    $time_end = microtime(true);
    $timeTotal = (float) round($time_end - $time_start, 3);
    $io->note('Test execution time: ' . $timeTotal . ' seconds');
}

