#!/usr/bin/env php
<?php
/*
 * This file is part of Log2Test Project.
 *
 * (c) Ousama Ben Younes <benyounes.ousama@gmail.com>
*
*/

namespace Log2Test;

require_once('vendor/autoload.php');

use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Formatter\OutputFormatter;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;


$output = new ConsoleOutput();
$output->setFormatter(new OutputFormatter(true));
$io = new SymfonyStyle(new ArrayInput([]), $output);

// Parsing parameters
$options = getopt("m:");
$mode = (isset($options['m']) ? $options['m'] : '');

if ('execute' === $mode || '' === $mode) {
    for ($testId = 1; $testId <= {{ numberOfTestSuite }}; $testId++) {
        if (is_dir('{{ testSuitePath }}/testSuite' . $testId . '/')) {
            ########################################## TestSuite Running ######################################
            $processResults = [];
            $io->title('Log2Test: Running TestsSuite' . $testId);
            $io->writeln('');
            $files = glob('{{ testSuitePath }}/testSuite' . $testId . '/*.php');
            foreach ($files as $fullfilename) {
                $io->writeln('Running process: php ' . $fullfilename);
                $process = new Process('php ' . $fullfilename);
                $process->run();
                if (!$process->isSuccessful()) {
                    throw new ProcessFailedException($process);
                }
                $processResults[] = json_decode($process->getOutput());
            }
            $jsonResultFile = '{{ testSuitePath }}/testSuite' . $testId . '/result' . $testId . '.json';
            file_put_contents($jsonResultFile, json_encode($processResults, JSON_PRETTY_PRINT) , FILE_APPEND);
            $io->note('Results Storred on ' . $jsonResultFile);
        }
    }
}

if ('compileResult' === $mode || '' === $mode) {
    $totalError = 0;
    $totalSuccess = 0;
    $totalRedirect = 0;
    $storedResult = [];
    $io->title('Log2Test: Compiling all TestsSuite results');

    for ($testId = 1; $testId <= {{ numberOfTestSuite }}; $testId++) {
        $jsonResultFile = '{{ testSuitePath }}/testSuite' . $testId . DIRECTORY_SEPARATOR . 'result' . $testId . '.json';
        if (is_file($jsonResultFile)) {
            ########################################## TestSuite Compiling ######################################
            $io->note('Log2Test: Compiling TestsSuite' . $testId . ' results');
            $jsonData = file_get_contents($jsonResultFile);
            $testResults = json_decode($jsonData);
            if ($testResults) {
                foreach ($testResults as $result) {
                    $nbErrors = sizeof($result->{Constants::ERROR});
                    $totalError += $nbErrors;
                    $nbSuccess = sizeof($result->{Constants::SUCCESS});
                    $totalSuccess += $nbSuccess;
                    $nbRedirect = sizeof($result->{Constants::REDIRECTED});
                    $totalRedirect += $nbRedirect;
                    $className = $result->className;
                    $storedResult[$className] = [$nbErrors, $nbSuccess, $nbRedirect, $testId];
                }
            }
        }
    }

    $mailXml = new \SimpleXMLElement('<testsuites name="Testing Global TestSuite" tests="' . $totalSuccess . '" errors="' . $totalError . '" disabled="' . $totalRedirect . '"></testsuites>');
    foreach ($storedResult as $className => $result) {
        $nbErrors = $result[0];
        $nbSuccess = $result[1];
        $nbRedirect = $result[2];
        $testId = $result[3];
        $mailXml->addChild('testsuite name="TestSuite' . $testId . ' ' . $className . '" tests="' . $nbSuccess . '" errors="' . $nbErrors . '" disabled="' . $nbRedirect .'"');
    }
    $mailXml->asXML('{{ testSuitePath }}/result.xml');
    $io->note('Global tests Results Storred on ' . '{{ testSuitePath }}/result.xml');
}

